{"version":3,"sources":["userpriv.js"],"names":["ids","priv","getRecords","permissions","slice","map","row","Object","fromEntries","table","name","index","allowed","id","permission","getFormatter","cell","formatterParams","getRow","getIndex","trueValue","getData","checked","getValue","displayTableName","ew","htmlEncode","getTitleHtml","phraseId","language","phrase","getColumns","title","field","formatter","sorter","headerSortTristate","resizable","headerSort","$","timer","options","deepAssign","data","layout","initialSort","column","dir","columnHeaderSortMulti","columns","tableOptions","Tabulator","on","parseInt","this","dataset","value","isNaN","startsWith","closest","find","not","prop","each","i","el","triggerHandler","container","document","querySelector","tooltip","offset","initMultiSelectCheckboxes","fixLayoutHeight","cancel","later","setFilter","val","jQuery"],"mappings":"AACA,IAAIA,IAAMC,KAAKD,IAGf,SAASE,aAEL,OADWD,KAAKE,YAAYC,MAAM,GACtBC,KAAIC,GAAOC,OAAOC,YAAY,CACtC,CAAC,QAASF,EAAIG,OACd,CAAC,OAAQH,EAAII,MACb,CAAC,QAASJ,EAAIK,OACd,CAAC,UAAWL,EAAIM,YACbZ,IAAIK,KAAIQ,GAAM,CAACA,EAAIP,EAAIQ,WAAab,KAAKY,UAKpD,SAASE,aAAaF,GAClB,OAAO,SAASG,EAAMC,GAClB,IAAIX,EAAMU,EAAKE,SACXP,EAAQL,EAAIa,WACZT,EAAOG,EAAK,IAAMF,EAClBS,EAAYnB,KAAKY,GACjBD,EAAUN,EAAIe,UAAUT,QACxBU,EAAUN,EAAKO,YAAcH,EAEjC,OADAd,EAAIgB,QAAUA,EACP,yGAA2GZ,EAAO,SAAWA,EAChI,YAAcU,EAAY,iBAAmBT,EAAQ,KACpDW,EAAU,WAAa,MACrBV,EAAUQ,IAAcA,EAAa,YAAc,IAAM,WAKxE,SAASI,iBAAiBR,EAAMC,GAC5B,IAAIX,EAAMU,EAAKE,SACf,MAAO,iDAAiDO,GAAGC,WAAWpB,EAAIe,UAAUX,UAAUJ,EAAIe,UAAUZ,gDAAgDH,EAAIa,yBAIpK,SAASQ,aAAad,EAAIe,GACtB,MAAO,yFAA2Ff,EAAK,SAAWA,EAA3G,sEACuCA,EAAK,KAAOY,GAAGI,SAASC,OAAO,cAAgBF,GAAYf,IAAO,iBAIpH,SAASkB,aACL,MAAO,CAAC,CACAC,MAAO,2BAA6BP,GAAGI,SAASC,OAAO,UAAY,UACnEG,MAAO,QACPC,UAAWV,iBACXW,OAAQ,SACRC,mBAAoBA,mBACpBC,WAAW,MAEZrC,IAAIK,KAAIQ,IACA,CACHmB,MAAOL,aAAad,GACpBoB,MAAOpB,EACPqB,UAAWnB,aAAaF,GACxByB,YAAY,EACZD,WAAW,OAO3B,CAACE,IACG,IAsCIC,EAtCAC,EAAUhB,GAAGiB,WAAW,CACxB/B,MAAO,QACPgC,KAAMzC,aACN0C,OAAQ,cACRC,YAAa,CACT,CAAEC,OAAQ,QAASC,IAAK,QAE5BC,uBAAuB,EACvBC,QAASlB,cACVmB,cAECzC,EAAQ,IAAI0C,UAAU,sCAAuCV,GACjEhC,EAAM2C,GAAG,iBAAiB,KACtBb,EAAE,wBAAwBa,GAAG,UAAU,WACnC,IAAIzC,EAAQ0C,SAASC,KAAKC,QAAQ5C,MAAO,IACrC6C,EAAQH,SAASC,KAAKE,MAAO,IAC5BC,MAAM9C,IAAW8C,MAAMD,KACpBF,KAAKhC,QACLrB,KAAKE,YAAYQ,GAAOG,YAAc0C,EAEtCvD,KAAKE,YAAYQ,GAAOG,YAAcb,KAAKE,YAAYQ,GAAOG,WAAa0C,EAE3EF,KAAK5C,KAAKgD,WAAW,WACrBnB,EAAEe,MAAMK,QAAQ,iBAAiBC,KAAK,2CAA2CjD,MAC5EkD,IAAIP,MAAMO,IAAI,aACdC,KAAK,UAAWR,KAAKhC,SACrByC,MAAK,CAACC,EAAGC,IAAO1B,EAAE0B,GAAIC,eAAe,gBAItD,IAAIC,EAAYC,SAASC,cAAc,QACvC9B,EAAE,+CAA+C+B,QAAQ,CAAEH,UAAAA,EAAWI,OAAQ,CAAC,EAAG,KAClF9C,GAAG+C,4BACH/C,GAAGgD,qBAMPlC,EAAE,eAAea,GAAG,SAAS,KACzBZ,GAAOkC,SACPlC,EAAQD,EAAEoC,MAAM,IAAK,MAAM,IAAMlE,EAAMmE,UAAU,QAAS,OAAQrC,EAAE,eAAesC,aA1C3F,CA4CGC","sourcesContent":["// IDs\r\nlet ids = priv.ids;\r\n\r\n// Get records\r\nfunction getRecords() {\r\n    let rows = priv.permissions.slice(0);\r\n    return rows.map(row => Object.fromEntries([\r\n        [\"table\", row.table], // Table caption\r\n        [\"name\", row.name], // Table name\r\n        [\"index\", row.index],\r\n        [\"allowed\", row.allowed],\r\n        ...ids.map(id => [id, row.permission & priv[id]])\r\n    ]));\r\n}\r\n\r\n// Get formatter function\r\nfunction getFormatter(id) {\r\n    return function(cell, formatterParams) {\r\n        let row = cell.getRow(),\r\n            index = row.getIndex(),\r\n            name = id + '_' + index,\r\n            trueValue = priv[id],\r\n            allowed = row.getData().allowed,\r\n            checked = cell.getValue() == trueValue;\r\n        row.checked = checked;\r\n        return '<div class=\"form-check\"><input type=\"checkbox\" class=\"form-check-input ew-priv ew-multi-select\" name=\"' + name + '\" id=\"' + name +\r\n            '\" value=\"' + trueValue + '\" data-index=\"' + index + '\"' +\r\n            (checked ? ' checked' : '') +\r\n            (((allowed & trueValue) != trueValue) ? ' disabled' : '') + '></div>';\r\n    };\r\n}\r\n\r\n// Get display table name\r\nfunction displayTableName(cell, formatterParams) {\r\n    let row = cell.getRow();\r\n    return `<span data-bs-toggle=\"tooltip\" data-bs-title=\"${ew.htmlEncode(row.getData().name)}\">${row.getData().table}</span><input type=\"hidden\" name=\"table_${row.getIndex()}\" value=\"1\">`;\r\n}\r\n\r\n// Get title HTML\r\nfunction getTitleHtml(id, phraseId) {\r\n    return '<div class=\"form-check\"><input type=\"checkbox\" class=\"form-check-input ew-priv\" name=\"' + id + '\" id=\"' + id + '\" data-ew-action=\"select-all\">' +\r\n        '<label class=\"form-check-label\" for=\"' + id + '\">' + ew.language.phrase(\"Permission\" + (phraseId || id)) + '</label></div>'\r\n}\r\n\r\n// Get columns\r\nfunction getColumns() {\r\n    return [{\r\n            title: '<span class=\"fw-normal\">' + ew.language.phrase(\"Tables\") + '</span>',\r\n            field: \"table\",\r\n            formatter: displayTableName,\r\n            sorter: \"string\",\r\n            headerSortTristate: headerSortTristate,\r\n            resizable: false\r\n        },\r\n        ...ids.map(id => {\r\n            return {\r\n                title: getTitleHtml(id),\r\n                field: id,\r\n                formatter: getFormatter(id),\r\n                headerSort: false,\r\n                resizable: false\r\n            };\r\n        })\r\n    ];\r\n}\r\n\r\n// Init\r\n($ => {\r\n    let options = ew.deepAssign({\r\n        index: \"index\",\r\n        data: getRecords(), // Load row data from array\r\n        layout: \"fitDataFill\", // Fit columns to Data\r\n        initialSort: [ // Set the initial sort order of the data\r\n            { column: \"table\", dir: \"asc\" },\r\n        ],\r\n        columnHeaderSortMulti: false, // Multi Column Sorting\r\n        columns: getColumns() // Define the table columns\r\n    }, tableOptions);\r\n\r\n    let table = new Tabulator(\".ew-card.ew-user-priv .ew-card-body\", options);\r\n    table.on(\"dataProcessed\", () => {\r\n        $(\"input[type=checkbox]\").on(\"change\", function() {\r\n            let index = parseInt(this.dataset.index, 10),\r\n                value = parseInt(this.value, 10);\r\n            if (!isNaN(index) && !isNaN(value)) {\r\n                if (this.checked) {\r\n                    priv.permissions[index].permission |= value;\r\n                } else {\r\n                    priv.permissions[index].permission ^= priv.permissions[index].permission ^ value;\r\n                }\r\n                if (this.name.startsWith(\"admin_\")) {\r\n                    $(this).closest(\"div[role=row]\").find(`input.ew-priv[type=checkbox][data-index=${index}]`)\r\n                        .not(this).not(\":disabled\")\r\n                        .prop(\"checked\", this.checked)\r\n                        .each((i, el) => $(el).triggerHandler(\"change\"));\r\n                }\r\n            }\r\n        });\r\n        let container = document.querySelector(\"main\");\r\n        $(\"span[data-bs-toggle=tooltip][data-bs-title]\").tooltip({ container, offset: [0, 4] });\r\n        ew.initMultiSelectCheckboxes();\r\n        ew.fixLayoutHeight();\r\n        // console.log(\"dataProcessed\");\r\n    });\r\n\r\n    // Re-load records on search\r\n    let timer;\r\n    $(\"#table-name\").on(\"input\", () => {\r\n        timer?.cancel();\r\n        timer = $.later(200, null, () => table.setFilter(\"table\", \"like\", $(\"#table-name\").val()));\r\n    });\r\n})(jQuery);\r\n"]}